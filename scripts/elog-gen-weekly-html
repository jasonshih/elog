#!/usr/bin/env python
# -*- Mode: Python; tab-width: 4; py-indent-offset: 4; -*-

"""

Generate HTML summary of the weeks data -- default is
this week, otherwise, the week containing the date
specified on the command line. All animals on included
that were on restriction during the specified time
period.  For VCS/YARC "enhanced monitoring".

"""

import sys; sys.path.append('/auto/share/lib/elog')

import sys
import os
import string
import types
import datetime, time

# from elog
import HTML
import elogdb

import numpy as np

DAYS = ['Mon', 'Tues', 'Weds', 'Thurs', 'Fri', 'Sat', 'Sun']

if __name__ == '__main__':
    if 0 and len(sys.argv) <= 1:
        sys.stderr.write('usage: elog-weekly [date]\n')
        sys.exit(1)

    db = elogdb.DB()

    # find monday of this week or week containing specified date
    if len(sys.argv) > 1:
        startd = datetime.datetime(1,1,1).strptime(sys.argv[1], '%Y-%m-%d')
        while startd.weekday() != 0:
            startd -= datetime.timedelta(1)
    else:
        startd = datetime.datetime(1,1,1).today()
        while startd.weekday() != 0:
            startd -= datetime.timedelta(1)
    start = startd.strftime('%Y-%m-%d')

    now = datetime.datetime(1,1,1).now()

    dates = []
    for n in range(7):
        dates.append(startd + datetime.timedelta(n))
            
    (ok, rows) = db.q("""SELECT * """
                      """ FROM session WHERE """
                      """ DATEDIFF(date, '%s') >= 0 AND """
                      """ DATEDIFF(date, '%s') < 7  AND """
                      """ restricted > 0"""
                      """ ORDER BY date""" % (start, start,))

    animals = list(set([r['animal'] for r in rows]))
    animals.sort()

    d = {}
    t = []
    for date in dates:
        ds = date.strftime('%Y-%m-%d')
        r = ['%s' % DAYS[date.weekday()], '%s' % ds,]
        for animal in animals:
            (ok, rows) = db.q("""SELECT weight,thweight """
                              """ FROM session WHERE """
                              """ date='%s' AND """
                              """ animal LIKE "%s" """ % (ds, animal))
            if len(rows) > 0 and \
                isinstance(rows[0]['weight'], types.FloatType):
                w = rows[0]['weight']
                bw = rows[0]['thweight'] / 0.85
                pbaseline = 100.0 * w / (rows[0]['thweight'] / 0.85)
                r.append('%.1f (%.0f%%)' % (w, pbaseline))
                if d.has_key(animal):
                    d[animal].append(rows[0]['weight'])
                else:
                    d[animal] = [rows[0]['weight'],]
            else:
                if date > now:
                    # hasn't happened yet..
                    r.append(' ')
                else:
                    r.append('-')
        t.append(r)

    r = ['', 'mean',]
    for animal in animals:
        try:
            r.append('%.1f' % np.mean(d[animal]))
        except KeyError:
            r.append(' ')
    t.append(r)

    sys.stdout.write('<H1>Mazer Lab</H1>\n')
    sys.stdout.write('<H2>NHP Weekly Weights</H2>\n')
    sys.stdout.write('<H3>[%s]-[%s]</H2>\n' % \
                     (dates[0].strftime('%Y-%m-%d'),
                      dates[-1].strftime('%Y-%m-%d'),))
    htmlcode = HTML.table(t, header_row=['day', 'date'] + animals)
    sys.stdout.write(htmlcode)
    sys.stdout.write('<p>\n')
    sys.stdout.write('() - percent baseline weight<p>\n')
    
