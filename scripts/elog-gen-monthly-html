#!/usr/bin/env python
# -*- Mode: Python; tab-width: 4; py-indent-offset: 4; -*-

"""
Get last week of data for specified animal -- for YARC/VCS monitoring

"""

import sys; sys.path.append('/auto/share/lib/elog')

import sys
import os
import string
import MySQLdb
import types
import datetime, time
import HTML

import numpy as np

DAYS = ['Mon', 'Tues', 'Weds', 'Thurs', 'Fri', 'Sat', 'Sun']

class DB:
    host='sql.mlab.yale.edu'
    user='dbusernopass'
    passwd=''
    db='mlabdata'

    def __init__(self):

        self.connection = MySQLdb.connect(DB.host,
                                          DB.user,
                                          DB.passwd,
                                          DB.db)
        self.cursor = self.connection.cursor()

    def row2dict(self, descr, row):
        """
        Convert a SQL query result-row into a dictionary.
        """
        dict = {}
        for k in range(len(descr)):
            if row[k] is None:
                dict[descr[k][0]] = ''
            else:
                dict[descr[k][0]] = row[k]
        return dict

    def q(self, cmd, one=False):
        try:
            self.cursor.execute(cmd)
            descr = self.cursor.description
            if not one:
                rows = self.cursor.fetchall()
                dicts = []
                for row in rows:
                    dicts.append(self.row2dict(descr, row))
                return (1, dicts)
            else:
                row = self.cursor.fetchone()
                return (1, row)

        except MySQLdb.Error, e:
            (number, msg) = e.args
            return (None, e)

def iget(rows, name):
    if isinstance(rows[0][name], types.StringType):
        return 0
    else:
        return rows[0][name]

def ps(s):
    if len(s): return s
    else: return '-'

if __name__ == '__main__':
    if 0 and len(sys.argv) <= 1:
        sys.stderr.write('usage: elog-gen-monthly-html [YYYY-MM]\n')
        sys.exit(1)

    db = DB()

    if len(sys.argv) > 1:
        date0 = '%s-01' % (sys.argv[1],)
    else:
        (ok, now) = db.q("""SELECT NOW()""", one=True)
        now = now[0]
        date0 = now.strftime('%Y-%m-01')

    (ok, rows) = db.q("""SELECT * """
                      """ FROM session WHERE """
                      """ DATEDIFF('%s', date) <= 31 AND """
                      """ restricted > 0""" % (date0,))

    animals = list(set([r['animal'] for r in rows]))
    animals.sort()

    for animal in animals:
        t = []
        for datenum in range(1,32):
            date = '%s-%02d' % (date0[:-2], datenum)
            tr = [date,]
            (ok, rows) = db.q("""SELECT * """
                              """ FROM session WHERE """
                              """ date='%s' AND """
                              """ animal LIKE "%s" """ % (date, animal))
            if len(rows):
                tr.append(ps('%s' % rows[0]['user']))
                tr.append(ps('%s' % rows[0]['weight']))
                if rows[0]['restricted']:
                    tr.append('y')
                else:
                    tr.append(' ')
                if rows[0]['tested']:
                    tr.append('y')
                else:
                    tr.append(' ')
                tr.append('y')                #stool
                tr.append('y')                #urine
                tr.append('y')                #skin
                tr.append('-')                #pcv
                ww = iget(rows,'water_work')
                ws = iget(rows, 'water_sup')
                wf = iget(rows, 'fruit_ml')
                wt = ww + ws + wf
                tr.append('%s (%s+%s+%s)' % (wt, ww, ws, wf))
                tr.append(rows[0]['fruit'])
            else:
                for n in range(10):
                    tr.append(' ')

            t.append(tr)

        if animal is not animals[0]:
            sys.stdout.write('<hr>\n')

        h = [['Monthly Health and Fluid Record',
              '%s' % (date0[:-3]), 'PI:Mazer', 'NHP:%s' % (animal,)],]
        sys.stdout.write(HTML.table(h))

        sys.stdout.write('<p>\n')

        s = """border: 1px solid #000000; border-collapse: collapse; """ \
          """ font-size: .8em;"""

        htmlcode = HTML.table(t, header_row=['date', 'user', 'weight',
                                             'restricted', 'tested',
                                             'stool', 'urine', 'skin', 'pcv',
                                             'fluid (wrk+sup+fruit)', 'other'],
                                             col_align=['center']*11,
                                             style=s)

        sys.stdout.write(htmlcode)
        sys.stdout.write('<p style="page-break-after:always;"> </p>\n')

