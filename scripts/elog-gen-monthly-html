#!/usr/bin/env python
# -*- Mode: Python; tab-width: 4; py-indent-offset: 4; -*-

"""
Get last week of data for specified animal -- for YARC/VCS monitoring

"""

import sys; sys.path.append('/auto/share/lib/elog')

import sys
import os
import string
import types
import datetime, time

# from elog
import HTML
import elogdb
from keyboard import keyboard

import numpy as np

def iget(rows, name):
    if isinstance(rows[0][name], types.StringType):
        return 0
    else:
        return rows[0][name]

def ps(s):
    """return string or '-'
    """
    if len(s): return s
    else: return '-'

def pc(s):                                # checked?
    """return checkmark or blank
    """
    if s: return '&#10004;'
    else: return ' '

def pyn(s):
    """return 'y' or 'n' based on boolean value
    """
    if s: return 'y'
    else: return 'n'
        
if __name__ == '__main__':
    if 0 and len(sys.argv) <= 1:
        sys.stderr.write('usage: elog-gen-monthly-html [YYYY-MM]\n')
        sys.exit(1)

    db = elogdb.DB()

    if len(sys.argv) > 1:
        date0 = '%s-01' % (sys.argv[1],)
    else:
        (ok, now) = db.q("""SELECT NOW()""", one=True)
        now = now[0]
        date0 = now.strftime('%Y-%m-01')

    # only do this for animals restricted during the specified month
    (ok, rows) = db.q("""SELECT animal """
                      """ FROM session WHERE """
                      """ DATEDIFF('%s', date) <= 31 AND """
                      """ restricted > 0""" % (date0,))

    animals = list(set([r['animal'] for r in rows]))
    animals.sort()
    if len(animals) == 0:
        sys.stderr.write('no animals on restriction\n')
        sys.exit(0)

    DAYS = ('Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa', 'Su')
    for animal in animals:
        t = []
        for datenum in range(1,32):
            date = '%s%02d' % (date0[:-2], datenum)
            dow = time.strptime(date, '%Y-%m-%d').tm_wday
            x = '%s %s' % (DAYS[dow], date)
            if dow in (5,6):
                datestr = """<font color='blue'>%s</font>""" % x
            else:
                datestr = x
            tr = [datestr,]
            (ok, rows) = db.q("""SELECT * """
                              """ FROM session WHERE """
                              """ date='%s' AND """
                              """ animal LIKE "%s" """ % (date, animal))
            if len(rows):
                tr.append(ps('%s' % rows[0]['user']))
                tr.append(ps('%s' % rows[0]['weight']))
                tr.append(pyn(rows[0]['restricted']))
                tr.append(pyn(rows[0]['tested']))
                tr.append(pc(rows[0]['health_stool']))
                tr.append(pc(rows[0]['health_urine']))
                tr.append(pc(rows[0]['health_skin']))
                tr.append(pc(rows[0]['health_pcv']))
                ww = iget(rows,'water_work')
                ws = iget(rows, 'water_sup')
                wf = iget(rows, 'fruit_ml')
                wt = ww + ws + wf
                tr.append('%s (%s+%s+%s)' % (wt, ww, ws, wf))
                tr.append(rows[0]['fruit'])
                l = rows[0]['note'].split('\n')[0]
                if len(l) and l[0] in '%#;%/!':
                    # if first line of note appears to be a "comment", put
                    # it in the other column..
                    tr.append(l[1:])
                else:
                    tr.append(' ')

            else:
                for n in range(11):
                    tr.append(' ')
            tr.append(date)
            t.append(tr)

        if animal is not animals[0]:
            sys.stdout.write('<hr>\n')

        h = [['Monthly Health and Fluid Record',
              '%s' % (date0[:-3]), 'PI:Mazer', 'NHP:%s' % (animal,)],]
        sys.stdout.write(HTML.table(h))

        sys.stdout.write('<p>\n')

        s = """border: 1px solid #000000; border-collapse: collapse; """ \
          """ font-size: .8em;"""

        ca = col_align=['center']*13
        ca[9] = 'left'
        ca[10] = 'left'
        ca[11] = 'left'

        htmlcode = HTML.table(t, header_row=['date', 'user', 'kg',
                                             'restricted', 'tested',
                                             'stool', 'urine', 'skin', 'pcv',
                                             'fluid (w+s+f)', 'fruit',
                                             'other', 'date'],
                                             col_align=ca,
                                             style=s)
        sys.stdout.write('<pre>')
        sys.stdout.write(htmlcode)
        sys.stdout.write('</pre>')

        sys.stdout.write('<p style="page-break-after:always;"> </p>\n')

